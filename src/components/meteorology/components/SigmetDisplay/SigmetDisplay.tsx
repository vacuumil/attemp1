// src/components/meteorology/components/SigmetDisplay/SigmetDisplay.tsx
import React from 'react';
import type { SigmetData } from '../../utils/sigmetParser';
import {
  SigmetContainer,
  SigmetCard,
  HazardLevel,
  AffectedArea,
  TimeIndicator
} from './SigmetDisplay.styles';

interface SigmetDisplayProps {
  sigmetData: SigmetData[];
  icaoCode: string;
}

export const SigmetDisplay: React.FC<SigmetDisplayProps> = ({ sigmetData, icaoCode }) => {
  const getHazardIcon = (hazard: string): string => {
    const icons: Record<string, string> = {
      'THUNDERSTORM': '‚õàÔ∏è',
      'TURBULENCE': 'üí®',
      'ICING': 'üßä',
      'VOLCANIC_ASH': 'üåã',
      'DUST_STORM': 'üå™Ô∏è',
      'SAND_STORM': 'üèúÔ∏è',
      'CYCLONE': 'üåÄ',
      'FOG': 'üå´Ô∏è'
    };
    return icons[hazard] || '‚ö†Ô∏è';
  };

  const getHazardColor = (hazard: string): string => {
    const colors: Record<string, string> = {
      'THUNDERSTORM': '#ff6b6b',
      'TURBULENCE': '#ffd700',
      'ICING': '#64ffda',
      'VOLCANIC_ASH': '#9d4edd',
      'DUST_STORM': '#8b4513',
      'SAND_STORM': '#deb887',
      'CYCLONE': '#1a6fc4',
      'FOG': '#8892b0'
    };
    return colors[hazard] || '#e6f1ff';
  };

  const getSeverityLevel = (severity: string): string => {
    const levels: Record<string, string> = {
      'LIGHT': '–°–ª–∞–±–∞—è',
      'MODERATE': '–£–º–µ—Ä–µ–Ω–Ω–∞—è',
      'SEVERE': '–°–∏–ª—å–Ω–∞—è',
      'EXTREME': '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è'
    };
    return levels[severity] || severity;
  };

  return (
    <SigmetContainer>
      <div style={{ textAlign: 'center', marginBottom: '20px' }}>
        <h3 style={{ color: '#64ffda', marginBottom: '10px' }}>
          ‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–µ –º–µ—Ç–µ–æ—è–≤–ª–µ–Ω–∏—è (SIGMET/AIRMET)
        </h3>
        <div style={{ color: '#8892b0' }}>
          –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {icaoCode}
        </div>
      </div>

      {sigmetData.length === 0 ? (
        <div style={{ 
          textAlign: 'center', 
          padding: '40px', 
          color: '#8892b0',
          fontStyle: 'italic'
        }}>
          ‚≠ê –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π SIGMET/AIRMET –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
        </div>
      ) : (
        sigmetData.map((sigmet, index) => (
          <SigmetCard key={index} hazardType={sigmet.hazardType}>
            <div className="sigmet-header">
              <div className="hazard-info">
                <span 
                  className="hazard-icon"
                  style={{ color: getHazardColor(sigmet.hazardType) }}
                >
                  {getHazardIcon(sigmet.hazardType)}
                </span>
                <div>
                  <h4>{sigmet.hazardType.replace('_', ' ')}</h4>
                  <HazardLevel level={sigmet.severity}>
                    –£—Ä–æ–≤–µ–Ω—å: {getSeverityLevel(sigmet.severity)}
                  </HazardLevel>
                </div>
              </div>
              <TimeIndicator>
                {sigmet.validity.from} - {sigmet.validity.to}
              </TimeIndicator>
            </div>

            <div className="sigmet-content">
              <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {sigmet.description}</p>
              
              <AffectedArea>
                <strong>–ó–æ–Ω–∞ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è:</strong> {sigmet.areaDescription}
                {sigmet.altitude && (
                  <div>–í—ã—Å–æ—Ç–∞: {sigmet.altitude.min} - {sigmet.altitude.max} ft</div>
                )}
              </AffectedArea>

              {sigmet.movement && (
                <div className="movement">
                  <strong>–î–≤–∏–∂–µ–Ω–∏–µ:</strong> {sigmet.movement.direction}¬∞ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é {sigmet.movement.speed} kt
                </div>
              )}

              <div className="issuance-info">
                –í—ã–ø—É—â–µ–Ω–æ: {sigmet.issuanceTime} ‚Ä¢ –°—Ç–∞–Ω—Ü–∏—è: {sigmet.issuingStation}
              </div>
            </div>
          </SigmetCard>
        ))
      )}
    </SigmetContainer>
  );
};