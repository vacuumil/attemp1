// src/components/meteorology/components/TafDisplay/TafDisplay.tsx
import React, { useState, useMemo } from 'react';
import type { ParsedTaf, TurbulenceInfo, IcingInfo, TemperatureInfo } from '../../utils/tafParser';
import { 
  getWindDescription, 
  getVisibilityDescription, 
  getWeatherDescription, 
  getCloudDescriptionWithHazards,
  getCbHazardsDescription
} from '../../utils/tafParser';
import {
  TafContainer,
  TafPeriod,
  ForecastGroup,
  WeatherTimeline,
  TimelineItem,
  ChangeIndicator
} from './TafDisplay.styles';

interface TafDisplayProps {
  tafData: ParsedTaf | null;
  icaoCode: string;
}

export const TafDisplay: React.FC<TafDisplayProps> = ({ tafData, icaoCode }) => {
  const [expandedPeriods, setExpandedPeriods] = useState<Set<number>>(new Set([0]));

  // –í—ã–Ω–æ—Å–∏–º useMemo –î–û –ª—é–±–æ–≥–æ —É—Å–ª–æ–≤–∏—è
  const activePeriodIndex = useMemo(() => {
    if (!tafData || !tafData.forecast || tafData.forecast.length === 0) {
      return -1;
    }

    const now = new Date();
    const currentDay = now.getUTCDate().toString().padStart(2, '0');
    const currentTime = now.getUTCHours().toString().padStart(2, '0') + 
                       now.getUTCMinutes().toString().padStart(2, '0');

    return tafData.forecast.findIndex(period => {
      if (!period || !period.validity.from || !period.validity.to) return false;
      
      const fromDay = period.validity.from.slice(0, 2);
      const fromTime = period.validity.from.slice(2, 6);
      const toTime = period.validity.to.slice(2, 6);

      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–∏–æ–¥–∞
      return fromDay === currentDay && fromTime <= currentTime && currentTime <= toTime;
    });
  }, [tafData]);

  // –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å–ª–µ —Ö—É–∫–æ–≤
  if (!tafData || !tafData.forecast || tafData.forecast.length === 0) {
    return (
      <TafContainer>
        <div style={{ textAlign: 'center', padding: '40px', color: '#8892b0' }}>
          <h3 style={{ color: '#ff6b6b', marginBottom: '15px' }}>‚ùå –î–∞–Ω–Ω—ã–µ TAF –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</h3>
          <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å TAF –¥–ª—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ {icaoCode}</p>
        </div>
      </TafContainer>
    );
  }

  const togglePeriod = (index: number) => {
    const newExpanded = new Set(expandedPeriods);
    if (newExpanded.has(index)) {
      newExpanded.delete(index);
    } else {
      newExpanded.add(index);
    }
    setExpandedPeriods(newExpanded);
  };

  const formatValidity = (from: string, to: string): string => {
    if (!from || !to) return '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    
    try {
      const fromDay = parseInt(from.slice(0, 2));
      const fromHour = from.slice(2, 4);
      const fromMinute = from.slice(4, 6) || '00';
      
      const toDay = parseInt(to.slice(0, 2));
      const toHour = to.slice(2, 4);
      const toMinute = to.slice(4, 6) || '00';
      
      // –ï—Å–ª–∏ –¥–Ω–∏ —Ä–∞–∑–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–∞ –¥–Ω—è
      if (fromDay !== toDay) {
        return `${fromDay}.${fromHour}:${fromMinute} - ${toDay}.${toHour}:${toMinute}Z`;
      }
      
      return `${fromHour}:${fromMinute} - ${toHour}:${toMinute}Z`;
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞:', from, to, error);
      return '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞';
    }
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤
  const getMonthName = (month: number): string => {
    const months = [
      '—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞—è', '–∏—é–Ω',
      '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'
    ];
    return months[month - 1] || '';
  };

  const formatDate = (timeString: string): string => {
    if (!timeString || timeString.length < 4) return '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    
    try {
      // –î–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø—É—Å–∫–∞ (DDHHMMZ) - 6 –∏–ª–∏ 7 —Å–∏–º–≤–æ–ª–æ–≤
      if (timeString.length >= 6) {
        const day = timeString.slice(0, 2);
        const hour = timeString.slice(2, 4);
        const minute = timeString.length >= 6 ? timeString.slice(4, 6) : '00';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü –∏ –≥–æ–¥
        const now = new Date();
        const currentYear = now.getUTCFullYear();
        const currentMonth = now.getUTCMonth() + 1;
        
        const dayNum = parseInt(day);
        let month = currentMonth;
        let year = currentYear;
        
        // –ï—Å–ª–∏ –¥–µ–Ω—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        const currentDay = now.getUTCDate();
        if (dayNum < currentDay) {
          month = currentMonth === 12 ? 1 : currentMonth + 1;
          year = currentMonth === 12 ? currentYear + 1 : currentYear;
        }
        
        return `${dayNum} ${getMonthName(month)} ${year}, ${hour}:${minute}Z`;
      }
      
      // –î–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤ (HHMM) - 4 —Å–∏–º–≤–æ–ª–∞
      if (timeString.length === 4) {
        const hour = timeString.slice(0, 2);
        const minute = timeString.slice(2, 4);
        return `${hour}:${minute}Z`;
      }
      
      return timeString;
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏:', timeString, error);
      return '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏';
    }
  };

  const getChangeTypeInfo = (type?: string, probability?: number) => {
    const types: Record<string, { icon: string; name: string; description: string; color: string }> = {
      'BECMG': {
        icon: 'üîÑ',
        name: 'BECMG',
        description: '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ',
        color: '#1a6fc4'
      },
      'TEMPO': {
        icon: '‚è±Ô∏è', 
        name: 'TEMPO',
        description: '–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è',
        color: '#ffd700'
      },
      'PROB': {
        icon: 'üé≤',
        name: `PROB${probability || 30}`,
        description: `–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å ${probability || 30}%`,
        color: '#9d4edd'
      },
      'FM': {
        icon: 'üõ¨',
        name: 'FM',
        description: '–†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ',
        color: '#64ffda'
      }
    };

    return types[type || ''] || { 
      icon: 'üìä', 
      name: '–û–°–ù–û–í–ù–û–ô', 
      description: '–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑',
      color: '#8892b0'
    };
  };

  const getPeriodSummary = (period: ParsedTaf['forecast'][0]) => {
    const summary = [];
    
    if (period.wind) {
      const windDir = period.wind.direction === 'VRB' ? '–ü–µ—Ä–µ–º' : period.wind.direction;
      summary.push(`üí® ${windDir}¬∞/${period.wind.speed}kt`);
    }
    
    if (period.visibility) {
      summary.push(`üëÅÔ∏è ${period.visibility.isCavok ? 'CAVOK' : period.visibility.value + 'm'}`);
    } else {
      summary.push(`üëÅÔ∏è –ù–µ —É–∫–∞–∑–∞–Ω–∞`);
    }
    
    if (period.weather && period.weather.length > 0) {
      const mainWeather = period.weather[0];
      summary.push(getWeatherIcon(mainWeather.phenomena[0]));
    }
    
    if (period.clouds && period.clouds.length > 0) {
      const mainCloud = period.clouds.find(c => c.isCeiling) || period.clouds[0];
      summary.push(`‚òÅÔ∏è ${mainCloud.coverage.charAt(0)}`);
    } else {
      summary.push(`‚òÅÔ∏è NSC`);
    }

    return summary.join(' ‚Ä¢ ');
  };

  const getWeatherIcon = (phenomenon: string): string => {
    const icons: Record<string, string> = {
      'RA': 'üåßÔ∏è', 'SN': '‚ùÑÔ∏è', 'FG': 'üå´Ô∏è', 'BR': 'üí®', 'HZ': 'üò∂‚Äçüå´Ô∏è',
      'TS': '‚õàÔ∏è', 'DZ': 'üå¶Ô∏è', 'GR': 'üßä', 'GS': 'üå®Ô∏è', 'PL': 'üåßÔ∏è‚ùÑÔ∏è',
      'SG': 'üå®Ô∏è', 'IC': 'üßä', 'UP': 'üíß', 'SQ': 'üí®', 'FC': 'üå™Ô∏è',
      'DS': 'üèúÔ∏è', 'SS': 'üå™Ô∏è', 'VA': 'üåã', 'PO': 'üåÄ', 'DU': 'üèúÔ∏è',
      'SA': 'üå™Ô∏è'
    };
    return icons[phenomenon] || 'üå§Ô∏è';
  };

  const getTurbulenceDescription = (turbulence: TurbulenceInfo) => {
    const intensityMap: Record<string, string> = {
      'light': '–°–ª–∞–±–∞—è',
      'light_moderate': '–£–º–µ—Ä–µ–Ω–Ω–æ-—Å–ª–∞–±–∞—è', 
      'moderate': '–£–º–µ—Ä–µ–Ω–Ω–∞—è',
      'moderate_severe': '–£–º–µ—Ä–µ–Ω–Ω–æ-—Å–∏–ª—å–Ω–∞—è',
      'severe': '–°–∏–ª—å–Ω–∞—è',
      'extreme': '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è'
    };

    return `${intensityMap[turbulence.intensity]} —Ç—É—Ä–±—É–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞ ${turbulence.minAltitude}-${turbulence.maxAltitude} ft`;
  };

  const getIcingDescription = (icing: IcingInfo) => {
    const intensityMap: Record<string, string> = {
      'light': '–°–ª–∞–±–æ–µ',
      'light_moderate': '–£–º–µ—Ä–µ–Ω–Ω–æ-—Å–ª–∞–±–æ–µ',
      'moderate': '–£–º–µ—Ä–µ–Ω–Ω–æ–µ', 
      'severe': '–°–∏–ª—å–Ω–æ–µ'
    };

    return `${intensityMap[icing.intensity]} –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏–µ –Ω–∞ ${icing.minAltitude}-${icing.maxAltitude} ft`;
  };

  const getCeilingInfo = (clouds: ParsedTaf['forecast'][0]['clouds']) => {
    if (!clouds || clouds.length === 0) return '–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: –Ω–µ—Ç';
    const ceiling = clouds.find(cloud => cloud.isCeiling);
    return ceiling ? `–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: ${ceiling.altitude} ft` : '–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: –Ω–µ—Ç';
  };

  const getTemperatureDescription = (temp: TemperatureInfo): string => {
    const typeText = temp.type === 'max' ? '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è' : '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è';
    return `${typeText}: ${temp.value > 0 ? '+' : ''}${temp.value}¬∞C –≤ ${formatDate(temp.time)}`;
  };

  // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ TAF —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç undefined
  const getTafOverview = () => {
    const mainPeriod = tafData.forecast[0];
    if (!mainPeriod) {
      return {
        hasSignificantWeather: false,
        mainWind: undefined,
        mainVisibility: undefined,
        ceiling: '–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
      };
    }

    const hasSignificantWeather = tafData.forecast.some(period => 
      period.weather && period.weather.length > 0 || period.turbulence || period.icing
    );
    
    return {
      hasSignificantWeather,
      mainWind: mainPeriod.wind,
      mainVisibility: mainPeriod.visibility,
      ceiling: getCeilingInfo(mainPeriod.clouds)
    };
  };

  const tafOverview = getTafOverview();

  return (
    <TafContainer>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
      <div style={{ textAlign: 'center', marginBottom: '25px' }}>
        <h3 style={{ color: '#64ffda', marginBottom: '10px', fontSize: '1.8rem' }}>
          üìÖ –ê–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ (TAF) - {icaoCode}
        </h3>
        <div style={{ color: '#8892b0', lineHeight: '1.6' }}>
          <div>
            <strong>–í—ã–ø—É—â–µ–Ω:</strong> {tafData.issuanceTime ? formatDate(tafData.issuanceTime) : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
          </div>
          <div>
            <strong>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:</strong> {formatDate(tafData.validity.from)} - {formatDate(tafData.validity.to)}
          </div>
          {activePeriodIndex !== -1 && (
            <div style={{ color: '#64ffda', marginTop: '5px' }}>
              ‚úÖ <strong>–ê–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥:</strong> {activePeriodIndex + 1}-–π –∏–∑ {tafData.forecast.length}
            </div>
          )}
        </div>
      </div>

      {/* –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */}
      <div style={{ marginTop: '25px' }}>

        {/* –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ TAF */}
        <div style={{ 
          padding: '15px',
          background: 'rgba(10, 25, 47, 0.5)',
          borderRadius: '8px',
          border: '1px solid #64ffda'
        }}>
          <h4 style={{ color: '#64ffda', marginBottom: '10px' }}>üìã –ò—Å—Ö–æ–¥–Ω—ã–π TAF:</h4>
          <code style={{ 
            display: 'block',
            padding: '10px',
            background: 'rgba(0, 0, 0, 0.3)',
            borderRadius: '6px',
            fontSize: '0.9rem',
            color: '#e6f1ff',
            fontFamily: 'Share Tech Mono, monospace',
            whiteSpace: 'pre-wrap',
            wordBreak: 'break-all'
          }}>
            {tafData.raw}
          </code>
        </div>
      </div>

      {/* –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ */}
      {tafData.temperature && tafData.temperature.length > 0 && (
        <div style={{ 
          background: 'rgba(255, 107, 107, 0.1)',
          border: '1px solid #ff6b6b',
          borderRadius: '8px',
          padding: '10px',
          marginTop: '10px'
        }}>
          <strong>üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</strong>
          {tafData.temperature.map((temp, idx) => (
            <div key={idx} style={{ marginLeft: '10px', fontSize: '0.9rem' }}>
              {getTemperatureDescription(temp)}
            </div>
          ))}
        </div>
      )}

      {/* –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —É—Å–ª–æ–≤–∏–π */}
      <div style={{ 
        background: 'rgba(26, 111, 196, 0.1)',
        border: '1px solid #1a6fc4',
        borderRadius: '8px',
        padding: '15px',
        marginBottom: '20px',
        marginTop: '20px',
      }}>
        <h4 style={{ color: '#64ffda', marginBottom: '10px' }}>üìä –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä:</h4>
        <div style={{ 
          display: 'grid', 
          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
          gap: '10px',
          color: '#e6f1ff',
          fontSize: '0.9rem'
        }}>
          <div>üí® <strong>–í–µ—Ç–µ—Ä:</strong> {tafOverview.mainWind ? getWindDescription(tafOverview.mainWind) : '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
          <div>üëÅÔ∏è <strong>–í–∏–¥–∏–º–æ—Å—Ç—å:</strong> {tafOverview.mainVisibility ? getVisibilityDescription(tafOverview.mainVisibility) : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</div>
          <div>‚òÅÔ∏è <strong>{tafOverview.ceiling}</strong></div>
          <div>‚ö†Ô∏è <strong>–û–ø–∞—Å–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è:</strong> {tafOverview.hasSignificantWeather ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}</div>
        </div>
      </div>

      {/* –ü–µ—Ä–∏–æ–¥—ã –ø—Ä–æ–≥–Ω–æ–∑–∞ */}
      {tafData.forecast.map((period, index) => {
        if (!period) return null;
        
        const changeInfo = getChangeTypeInfo(period.changeType, period.probability);
        const isExpanded = expandedPeriods.has(index);
        const isActive = index === activePeriodIndex;
        const isFuture = index > (activePeriodIndex !== -1 ? activePeriodIndex : 0);
        
        return (
          <TafPeriod key={index} isExpanded={isExpanded}>
            <div 
              className="period-header"
              onClick={() => togglePeriod(index)}
              style={{
                borderLeft: isActive ? '4px solid #64ffda' : 
                           isFuture ? '4px solid #ffd700' : '4px solid #1a6fc4'
              }}
            >
              <div className="validity">
                <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                  <strong style={{ fontSize: '1.1rem' }}>
                    {formatValidity(period.validity.from, period.validity.to)}
                  </strong>
                  {isActive && (
                    <span style={{
                      background: '#64ffda',
                      color: '#0a192f',
                      padding: '2px 8px',
                      borderRadius: '12px',
                      fontSize: '0.8rem',
                      fontWeight: 'bold'
                    }}>
                      üî¥ –ê–ö–¢–ò–í–ù–û
                    </span>
                  )}
                  {isFuture && (
                    <span style={{
                      background: '#ffd700',
                      color: '#0a192f',
                      padding: '2px 8px',
                      borderRadius: '12px',
                      fontSize: '0.8rem'
                    }}>
                      ‚è≥ –ë–£–î–£–©–ï–ï
                    </span>
                  )}
                </div>
                
                <ChangeIndicator type={period.changeType || 'MAIN'}>
                  {changeInfo.icon} {changeInfo.name}
                </ChangeIndicator>
                
                {period.probability && (
                  <span style={{ 
                    background: 'rgba(157, 78, 221, 0.3)',
                    color: '#9d4edd',
                    padding: '2px 8px',
                    borderRadius: '12px',
                    fontSize: '0.8rem'
                  }}>
                    üé≤ {period.probability}%
                  </span>
                )}
              </div>
              
              <div className="weather-summary">
                {getPeriodSummary(period)}
              </div>
            </div>

            {isExpanded && (
              <ForecastGroup>
                <div style={{ marginBottom: '20px' }}>
                  <h4 style={{ color: changeInfo.color, marginBottom: '15px' }}>
                    {changeInfo.icon} {changeInfo.description}
                  </h4>
                  <div style={{ 
                    color: '#8892b0', 
                    fontSize: '0.9rem',
                    lineHeight: '1.4'
                  }}>
                    <strong>–ü–µ—Ä–∏–æ–¥:</strong> {formatDate(period.validity.from)} - {formatDate(period.validity.to)} UTC
                    {period.probability && (
                      <span style={{ marginLeft: '15px' }}>
                        <strong>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:</strong> {period.probability}%
                      </span>
                    )}
                  </div>
                </div>

                <WeatherTimeline>
                  {/* –í–µ—Ç–µ—Ä */}
                  {period.wind ? (
                    <TimelineItem>
                      <strong>üå¨Ô∏è –í–µ—Ç–µ—Ä:</strong> 
                      <div style={{ marginLeft: '10px', marginTop: '5px' }}>
                        {getWindDescription(period.wind)}
                      </div>
                    </TimelineItem>
                  ) : (
                    <TimelineItem>
                      <strong>üå¨Ô∏è –í–µ—Ç–µ—Ä:</strong> 
                      <span style={{ marginLeft: '10px', color: '#8892b0' }}>–ù–µ —É–∫–∞–∑–∞–Ω</span>
                    </TimelineItem>
                  )}

                  {/* –í–∏–¥–∏–º–æ—Å—Ç—å */}
                  {period.visibility ? (
                    <TimelineItem>
                      <strong>üëÅÔ∏è –í–∏–¥–∏–º–æ—Å—Ç—å:</strong> 
                      <div style={{ marginLeft: '10px', marginTop: '5px' }}>
                        {getVisibilityDescription(period.visibility)}
                      </div>
                    </TimelineItem>
                  ) : (
                    <TimelineItem>
                      <strong>üëÅÔ∏è –í–∏–¥–∏–º–æ—Å—Ç—å:</strong> 
                      <span style={{ marginLeft: '10px', color: '#8892b0' }}>–ù–µ —É–∫–∞–∑–∞–Ω–∞</span>
                    </TimelineItem>
                  )}

                  {/* –ü–æ–≥–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è */}
                  {period.weather && period.weather.length > 0 ? (
                    <TimelineItem>
                      <strong>üå¶Ô∏è –ü–æ–≥–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è:</strong>
                      {period.weather.map((weather, idx) => (
                        <div key={idx} style={{ 
                          marginLeft: '10px', 
                          marginTop: '5px',
                          padding: '8px',
                          background: 'rgba(26, 111, 196, 0.1)',
                          borderRadius: '6px'
                        }}>
                          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                            <span>{getWeatherIcon(weather.phenomena[0])}</span>
                            <span>{getWeatherDescription(weather)}</span>
                          </div>
                          <code style={{ 
                            fontSize: '0.8rem', 
                            color: '#64ffda',
                            marginTop: '4px',
                            display: 'block'
                          }}>
                            {weather.raw}
                          </code>
                        </div>
                      ))}
                    </TimelineItem>
                  ) : (
                    <TimelineItem>
                      <strong>üå¶Ô∏è –ü–æ–≥–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è:</strong>
                      <span style={{ marginLeft: '10px', color: '#64ffda' }}>
                        –ù–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π
                      </span>
                    </TimelineItem>
                  )}

                  {/* –û–±–ª–∞—á–Ω–æ—Å—Ç—å */}
                  {period.clouds && period.clouds.length > 0 ? (
                    <TimelineItem>
                      <strong>‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å:</strong>
                      {period.clouds.map((cloud, idx) => (
                        <div key={idx} style={{ 
                          marginLeft: '10px', 
                          marginTop: '5px',
                          display: 'flex',
                          alignItems: 'center',
                          gap: '10px'
                        }}>
                          <span style={{ 
                            background: cloud.isCeiling ? 'rgba(255, 107, 107, 0.2)' : 
                                      cloud.type === 'CB' ? 'rgba(255, 215, 0, 0.3)' :
                                      'rgba(100, 255, 218, 0.2)',
                            padding: '4px 8px',
                            borderRadius: '4px',
                            fontSize: '0.8rem',
                            fontWeight: cloud.isCeiling ? 'bold' : 'normal',
                            border: cloud.type === 'CB' ? '1px solid #ffd700' : 'none'
                          }}>
                            {cloud.coverage.toUpperCase()}{cloud.type ? `/${cloud.type}` : ''}
                          </span>
                          <span>{getCloudDescriptionWithHazards(cloud)}</span>
                        </div>
                      ))}
                      
                      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è CB */}
                      {getCbHazardsDescription(period.clouds).length > 0 && (
                        <div style={{ 
                          marginLeft: '10px',
                          marginTop: '8px',
                          padding: '8px',
                          background: 'rgba(255, 215, 0, 0.1)',
                          border: '1px solid #ffd700',
                          borderRadius: '6px'
                        }}>
                          <strong style={{ color: '#ffd700' }}>‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è:</strong>
                          {getCbHazardsDescription(period.clouds).map((hazard, idx) => (
                            <div key={idx} style={{ fontSize: '0.8rem', marginTop: '2px' }}>
                              ‚Ä¢ {hazard}
                            </div>
                          ))}
                        </div>
                      )}
                    </TimelineItem>
                  ) : (
                    <TimelineItem>
                      <strong>‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å:</strong> 
                      <span style={{ marginLeft: '10px', color: '#64ffda' }}>
                        –ù–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏
                      </span>
                    </TimelineItem>
                  )}

                  {/* –¢—É—Ä–±—É–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å */}
                  {period.turbulence && (
                    <TimelineItem>
                      <strong>üí® –¢—É—Ä–±—É–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å:</strong>
                      <div style={{ marginLeft: '10px', marginTop: '5px', color: '#ffd700' }}>
                        ‚ö†Ô∏è {getTurbulenceDescription(period.turbulence)}
                      </div>
                    </TimelineItem>
                  )}

                  {/* –û–±–ª–µ–¥–µ–Ω–µ–Ω–∏–µ */}
                  {period.icing && (
                    <TimelineItem>
                      <strong>üßä –û–±–ª–µ–¥–µ–Ω–µ–Ω–∏–µ:</strong>
                      <div style={{ marginLeft: '10px', marginTop: '5px', color: '#64ffda' }}>
                        ‚ùÑÔ∏è {getIcingDescription(period.icing)}
                      </div>
                    </TimelineItem>
                  )}

                  {/* –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ */}
                  {period.temperature && period.temperature.length > 0 && (
                    <TimelineItem>
                      <strong>üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</strong>
                      {period.temperature.map((temp, idx) => (
                        <div key={idx} style={{ marginLeft: '10px', marginTop: '5px' }}>
                          {getTemperatureDescription(temp)}
                        </div>
                      ))}
                    </TimelineItem>
                  )}
                </WeatherTimeline>
              </ForecastGroup>
            )}
          </TafPeriod>
        );
      })}
    </TafContainer>
  );
};