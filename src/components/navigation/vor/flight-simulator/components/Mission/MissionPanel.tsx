// src/components/flight-simulator/components/Mission/MissionPanel.tsx
import React, { useState, useEffect, useCallback } from 'react';
import type { Mission } from './types';
import { MISSIONS } from './missionData';
import { MissionManager } from './MissionManager';
import './MissionPanel.css';

interface MissionPanelProps {
  missionManager: MissionManager;
  onMissionStart: (mission: Mission) => void;
  onMissionReset?: () => void;
}

export const MissionPanel: React.FC<MissionPanelProps> = ({
  missionManager,
  onMissionStart,
  onMissionReset
}) => {
  const [selectedMission, setSelectedMission] = useState<string>('');
  const [completionMessage, setCompletionMessage] = useState<string>('');
  const [missionState, setMissionState] = useState(missionManager.getMissionState());

  const handleMissionStart = useCallback(() => {
    const mission = MISSIONS.find(m => m.id === selectedMission);
    if (mission) {
      onMissionStart(mission);
      missionManager.startMission(mission);
      setCompletionMessage('');
      setMissionState(missionManager.getMissionState());
    }
  }, [selectedMission, onMissionStart, missionManager]);

  const handleMissionReset = useCallback(() => {
    missionManager.resetMission();
    setSelectedMission('');
    setCompletionMessage('');
    setMissionState(missionManager.getMissionState());
    if (onMissionReset) {
      onMissionReset();
    }
  }, [missionManager, onMissionReset]);

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏—Å—Å–∏–∏
  useEffect(() => {
    if (!missionState.currentMission || missionState.isCompleted) return;
    
    const interval = setInterval(() => {
      const newState = missionManager.getMissionState();
      setMissionState(newState);
    }, 500);
    
    return () => clearInterval(interval);
  }, [missionManager, missionState.currentMission, missionState.isCompleted]);

  // –û—Ç–¥–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏—Å—Å–∏–∏
  useEffect(() => {
    if (missionState.isCompleted && missionState.currentMission && !completionMessage) {
      setCompletionMessage('üéâ –ú–∏—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!');
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
      const autoResetTimer = setTimeout(() => {
        handleMissionReset();
      }, 10000);
      
      return () => clearTimeout(autoResetTimer);
    }
  }, [missionState.isCompleted, missionState.currentMission, completionMessage, handleMissionReset]);

  const progress = missionManager.getProgress();

  return (
    <div className="mission-panel">
      <h3>üìã –ú–∏—Å—Å–∏–∏</h3>
      
      {completionMessage && (
        <div className="mission-complete-message">
          {completionMessage}
          <button 
            onClick={handleMissionReset}
            className="mission-reset-btn"
          >
            –í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –º–∏—Å—Å–∏—é
          </button>
        </div>
      )}
      
      <div className="control-group">
        <label>–í—ã–±–µ—Ä–∏—Ç–µ –º–∏—Å—Å–∏—é:</label>
        <select 
          value={selectedMission}
          onChange={(e) => setSelectedMission(e.target.value)}
          className="mission-select"
          disabled={!!missionState.currentMission && !missionState.isCompleted}
        >
          <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –º–∏—Å—Å–∏—é --</option>
          {MISSIONS.map(mission => (
            <option key={mission.id} value={mission.id}>
              {mission.title} ({mission.difficulty === 'easy' ? 'üü¢ –õ–µ–≥–∫–∞—è' : 
                              mission.difficulty === 'medium' ? 'üü° –°—Ä–µ–¥–Ω—è—è' : 
                              'üî¥ –°–ª–æ–∂–Ω–∞—è'})
            </option>
          ))}
        </select>
      </div>
      
      <button 
        onClick={handleMissionStart}
        disabled={!selectedMission || (!!missionState.currentMission && !missionState.isCompleted)}
        className="mission-start-btn"
      >
        {missionState.currentMission ? 'üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å' : 'üöÄ –ù–∞—á–∞—Ç—å –º–∏—Å—Å–∏—é'}
      </button>

      {missionState.currentMission && (
        <div className="current-mission">
          <h4>üéØ {missionState.currentMission.title}</h4>
          <p className="mission-description">{missionState.currentMission.description}</p>
          
          <div className="mission-difficulty">
            –°–ª–æ–∂–Ω–æ—Å—Ç—å: {missionState.currentMission.difficulty === 'easy' ? 'üü¢ –õ–µ–≥–∫–∞—è' : 
                       missionState.currentMission.difficulty === 'medium' ? 'üü° –°—Ä–µ–¥–Ω—è—è' : 
                       'üî¥ –°–ª–æ–∂–Ω–∞—è'}
          </div>
          
          {missionState.currentObjective && (
            <div className="current-objective">
              <h5>üìå –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞:</h5>
              <p>{missionState.currentObjective.description}</p>
              
              {missionState.currentObjective.type === 'follow' && (
                <div className="follow-timer">
                  <small>–£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫—É—Ä—Å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</small>
                </div>
              )}
              
              <div className="progress-container">
                <div className="progress-bar">
                  <div 
                    className="progress-fill"
                    style={{ width: `${progress}%` }}
                  />
                </div>
                <span className="progress-text">
                  –ü—Ä–æ–≥—Ä–µ—Å—Å: {Math.round(progress)}%
                </span>
              </div>
            </div>
          )}
          
          {missionState.currentMission.wind && (
            <div className="mission-wind-info">
              <small>üí® –í–µ—Ç–µ—Ä: {missionState.currentMission.wind.direction}¬∞ / {missionState.currentMission.wind.speed.toFixed(1)} –µ–¥.</small>
            </div>
          )}

          {missionState.isCompleted && (
            <button 
              onClick={handleMissionReset}
              className="mission-reset-btn"
            >
              üéØ –í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –º–∏—Å—Å–∏—é
            </button>
          )}
        </div>
      )}

      {!missionState.currentMission && (
        <div className="mission-tips">
          <h5>üí° –°–æ–≤–µ—Ç—ã –ø–æ VOR-–Ω–∞–≤–∏–≥–∞—Ü–∏–∏:</h5>
          <ul>
            <li>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OBS –Ω–∞ –Ω—É–∂–Ω—ã–π —Ä–∞–¥–∏–∞–ª</li>
            <li>–î–≤–∏–≥–∞–π—Ç–µ—Å—å —Ç–∞–∫, —á—Ç–æ–±—ã —Å—Ç—Ä–µ–ª–∫–∞ CDI –±—ã–ª–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ</li>
            <li>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º TO/FROM –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è</li>
            <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ—Ç–µ—Ä –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ—Ç–∞</li>
            <li>–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ —Ä–∞–¥–∏–∞–ª—É –≤–Ω–æ—Å–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–∏–µ –ø–æ–ø—Ä–∞–≤–∫–∏ –∫—É—Ä—Å–∞</li>
          </ul>
        </div>
      )}
    </div>
  );
};