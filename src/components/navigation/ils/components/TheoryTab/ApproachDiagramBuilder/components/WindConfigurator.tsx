import React from 'react';
import type { ApproachConfig } from '../../../../types/ils.types';
import { 
  ConfigSection, 
  SectionTitle, 
  ControlGroup,
  Label,
  ValueDisplay,
  Slider,
  NumberInput,
  WindDirection,
  WindSpeedIndicator
} from './Configurator.styles';

interface WindConfiguratorProps {
  config: ApproachConfig;
  onUpdate: (config: Partial<ApproachConfig>) => void;
}

const windPresets = [
  { direction: 0, speed: 5, label: '–õ–µ–≥–∫–∏–π —Å–µ–≤–µ—Ä–Ω—ã–π' },
  { direction: 90, speed: 10, label: '–£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–æ—Å—Ç–æ—á–Ω—ã–π' },
  { direction: 180, speed: 15, label: '–°–∏–ª—å–Ω—ã–π —é–∂–Ω—ã–π' },
  { direction: 270, speed: 20, label: '–®—Ç–æ—Ä–º–æ–≤–æ–π –∑–∞–ø–∞–¥–Ω—ã–π' },
  { direction: 45, speed: 8, label: '–°–í –ø–æ—Ä—ã–≤–∏—Å—Ç—ã–π' },
];

export const WindConfigurator: React.FC<WindConfiguratorProps> = ({ config, onUpdate }) => {
  const handleWindDirectionChange = (value: number) => {
    onUpdate({ 
      wind: { ...config.wind, direction: value } 
    });
  };

  const handleWindSpeedChange = (value: number) => {
    onUpdate({ 
      wind: { ...config.wind, speed: value } 
    });
  };

  const handlePresetSelect = (preset: typeof windPresets[0]) => {
    onUpdate({ 
      wind: { direction: preset.direction, speed: preset.speed } 
    });
  };

  const getWindDirectionName = (degrees: number): string => {
    const directions = ['–°', '–°–í', '–í', '–Æ–í', '–Æ', '–Æ–ó', '–ó', '–°–ó'];
    const index = Math.round(degrees / 45) % 8;
    return directions[index];
  };

  const getWindStrength = (speed: number): string => {
    if (speed < 5) return '–®—Ç–∏–ª—å';
    if (speed < 10) return '–õ–µ–≥–∫–∏–π';
    if (speed < 15) return '–£–º–µ—Ä–µ–Ω–Ω—ã–π';
    if (speed < 20) return '–°–∏–ª—å–Ω—ã–π';
    return '–®—Ç–æ—Ä–º–æ–≤–æ–π';
  };

  return (
    <ConfigSection>
      <SectionTitle>üí® –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ—Ç—Ä–∞</SectionTitle>
      
      <ControlGroup>
        <Label>
          –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: 
          <ValueDisplay>
            {config.wind.direction}¬∞ ({getWindDirectionName(config.wind.direction)})
          </ValueDisplay>
        </Label>
        <WindDirection $direction={config.wind.direction}>
          ‚Üë
        </WindDirection>
        <Slider
          type="range"
          min="0"
          max="359"
          value={config.wind.direction}
          onChange={(e) => handleWindDirectionChange(parseInt(e.target.value))}
        />
        <NumberInput
          type="number"
          min="0"
          max="359"
          value={config.wind.direction}
          onChange={(e) => handleWindDirectionChange(parseInt(e.target.value))}
        />
      </ControlGroup>

      <ControlGroup>
        <Label>
          –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: 
          <ValueDisplay>
            {config.wind.speed} —É–∑–ª–æ–≤ ({getWindStrength(config.wind.speed)})
          </ValueDisplay>
        </Label>
        <WindSpeedIndicator $speed={config.wind.speed}>
          {['üí®', 'üí®üí®', 'üí®üí®üí®', 'üå¨Ô∏è', 'üåÄ'][Math.min(Math.floor(config.wind.speed / 5), 4)]}
        </WindSpeedIndicator>
        <Slider
          type="range"
          min="0"
          max="30"
          step="1"
          value={config.wind.speed}
          onChange={(e) => handleWindSpeedChange(parseInt(e.target.value))}
        />
        <NumberInput
          type="number"
          min="0"
          max="50"
          step="1"
          value={config.wind.speed}
          onChange={(e) => handleWindSpeedChange(parseInt(e.target.value))}
        />
      </ControlGroup>

      <ControlGroup>
        <Label>–ü–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã:</Label>
        <div style={{ display: 'flex', flexDirection: 'column', gap: '0.5rem' }}>
          {windPresets.map((preset, index) => (
            <button
              key={index}
              onClick={() => handlePresetSelect(preset)}
              style={{
                padding: '0.5rem',
                background: 'rgba(100, 255, 218, 0.1)',
                border: '1px solid rgba(100, 255, 218, 0.3)',
                borderRadius: '5px',
                color: '#e6f1ff',
                cursor: 'pointer',
                fontSize: '0.9rem'
              }}
            >
              {preset.label} ({preset.speed} —É–∑–ª–æ–≤)
            </button>
          ))}
        </div>
      </ControlGroup>
    </ConfigSection>
  );
};