// src/components/AlphaBravoChallenge/AlphaBravoChallenge.tsx
import React, { useState, useRef } from 'react';
import { getRandomLetters, type AviationLetter } from '../../data/aviationAlphabet';
import { ProgressBar } from '../ui/ProgressBar';
import {
  GameContainer,
  GameHeader,
  GameTitle,
  GameDescription,
  ModeSelector,
  ModeButton,
  QuestionContainer,
  QuestionText,
  QuestionSubtext,
  OptionsGrid,
  OptionButton,
  ScoreContainer,
  ActionButton,
  ResultsContainer,
  FinalScore,
  ResultMessage,
  RestartButton
} from './AlphaBravoChallenge.styles';

type GameMode = 'letter-to-word' | 'word-to-letter';

interface GameState {
  currentQuestion: AviationLetter | null;
  options: AviationLetter[];
  selectedAnswer: string | null;
  isAnswered: boolean;
  score: number;
  currentQuestionIndex: number;
}

export const AlphaBravoChallenge: React.FC = () => {
  const [gameMode, setGameMode] = useState<GameMode>('letter-to-word');
  const [gameState, setGameState] = useState<GameState>({
    currentQuestion: null,
    options: [],
    selectedAnswer: null,
    isAnswered: false,
    score: 0,
    currentQuestionIndex: 0
  });
  const [isGameStarted, setIsGameStarted] = useState(false);
  const [isGameFinished, setIsGameFinished] = useState(false);

  const TOTAL_QUESTIONS = 10;
  const gameStateRef = useRef(gameState);
  gameStateRef.current = gameState;

  const startGame = () => {
    setIsGameStarted(true);
    setIsGameFinished(false);
    setGameState({
      currentQuestion: null,
      options: [],
      selectedAnswer: null,
      isAnswered: false,
      score: 0,
      currentQuestionIndex: 0
    });
    generateNewQuestion();
  };

  const generateNewQuestion = () => {
    const randomLetters = getRandomLetters(4);
    const correctAnswer = randomLetters[0];
    const shuffledOptions = [...randomLetters].sort(() => 0.5 - Math.random());

    setGameState(prev => ({
      currentQuestion: correctAnswer,
      options: shuffledOptions,
      selectedAnswer: null,
      isAnswered: false,
      score: prev.score,
      currentQuestionIndex: prev.currentQuestionIndex + 1
    }));
  };

  const handleAnswer = (answer: string) => {
    if (gameState.isAnswered) return;

    const isCorrect = gameMode === 'letter-to-word' 
      ? answer === gameState.currentQuestion?.word
      : answer === gameState.currentQuestion?.letter;

    setGameState(prev => ({
      ...prev,
      selectedAnswer: answer,
      isAnswered: true,
      score: isCorrect ? prev.score + 1 : prev.score
    }));

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      if (gameStateRef.current.currentQuestionIndex >= TOTAL_QUESTIONS) {
        finishGame();
      } else {
        generateNewQuestion();
      }
    }, 1500);
  };

  const finishGame = () => {
    setIsGameFinished(true);
  };

  const getResultMessage = (score: number) => {
    const percentage = (score / TOTAL_QUESTIONS) * 100;
    if (percentage >= 90) return '–û—Ç–ª–∏—á–Ω–æ! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –∞—Å! ‚úàÔ∏è';
    if (percentage >= 70) return '–•–æ—Ä–æ—à–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üëç';
    if (percentage >= 50) return '–ù–µ–ø–ª–æ—Ö–æ! –ï—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å. üìö';
    return '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! –ü—Ä–∞–∫—Ç–∏–∫–∞ –≤–µ–¥–µ—Ç –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É. üîÑ';
  };

  if (!isGameStarted) {
    return (
      <GameContainer>
        <GameHeader>
          <GameTitle>Alpha Bravo Challenge</GameTitle>
          <GameDescription>
            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –ò–ö–ê–û. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É!
          </GameDescription>
        </GameHeader>

        <ModeSelector>
          <ModeButton 
            active={gameMode === 'letter-to-word'}
            onClick={() => setGameMode('letter-to-word')}
          >
            –ë—É–∫–≤–∞ ‚Üí –°–ª–æ–≤–æ
          </ModeButton>
          <ModeButton 
            active={gameMode === 'word-to-letter'}
            onClick={() => setGameMode('word-to-letter')}
          >
            –°–ª–æ–≤–æ ‚Üí –ë—É–∫–≤–∞
          </ModeButton>
        </ModeSelector>

        <div style={{ textAlign: 'center' }}>
          <ActionButton onClick={startGame}>
            –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
          </ActionButton>
        </div>
      </GameContainer>
    );
  }

  if (isGameFinished) {
    return (
      <GameContainer>
        <ResultsContainer>
          <GameTitle>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</GameTitle>
          <FinalScore>{gameState.score}/{TOTAL_QUESTIONS}</FinalScore>
          <ResultMessage>{getResultMessage(gameState.score)}</ResultMessage>
          <RestartButton onClick={startGame}>
            –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
          </RestartButton>
        </ResultsContainer>
      </GameContainer>
    );
  }

  return (
    <GameContainer>
      <ScoreContainer>
        <div>–í–æ–ø—Ä–æ—Å: {gameState.currentQuestionIndex}/{TOTAL_QUESTIONS}</div>
        <div>–°—á–µ—Ç: {gameState.score}</div>
      </ScoreContainer>

      <ProgressBar progress={gameState.currentQuestionIndex} max={TOTAL_QUESTIONS} />

      <QuestionContainer>
        <QuestionText>
          {gameMode === 'letter-to-word' 
            ? gameState.currentQuestion?.letter
            : gameState.currentQuestion?.word
          }
        </QuestionText>
        <QuestionSubtext>
          {gameMode === 'letter-to-word' 
            ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–ª–æ–≤–æ'
            : '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –±—É–∫–≤—É'
          }
        </QuestionSubtext>
      </QuestionContainer>

      <OptionsGrid>
        {gameState.options.map((option, index) => {
          const answer = gameMode === 'letter-to-word' ? option.word : option.letter;
          const isSelected = gameState.selectedAnswer === answer;
          const isCorrect = gameMode === 'letter-to-word' 
            ? answer === gameState.currentQuestion?.word
            : answer === gameState.currentQuestion?.letter;

          return (
            <OptionButton
              key={index}
              onClick={() => handleAnswer(answer)}
              disabled={gameState.isAnswered}
              isCorrect={gameState.isAnswered && isCorrect}
              isWrong={gameState.isAnswered && isSelected && !isCorrect}
            >
              {gameMode === 'letter-to-word' ? option.word : option.letter}
            </OptionButton>
          );
        })}
      </OptionsGrid>

      {gameState.isAnswered && (
        <div style={{ textAlign: 'center', color: '#64ffda', marginTop: '1rem' }}>
          {gameState.selectedAnswer === (gameMode === 'letter-to-word' 
            ? gameState.currentQuestion?.word 
            : gameState.currentQuestion?.letter
          ) ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}
        </div>
      )}
    </GameContainer>
  );
};